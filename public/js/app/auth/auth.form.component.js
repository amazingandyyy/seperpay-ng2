"use strict";var __decorate=this&&this.__decorate||function(e,t,o,r){var n,a=arguments.length,c=a<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,o):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(e,t,o,r);else for(var u=e.length-1;u>=0;u--)(n=e[u])&&(c=(a<3?n(c):a>3?n(t,o,c):n(t,o))||c);return a>3&&c&&Object.defineProperty(t,o,c),c},__metadata=this&&this.__metadata||function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)},core_1=require("@angular/core"),router_1=require("@angular/router"),auth_service_1=require("./auth.service"),AuthFormComponent=function(){function e(e,t){this.authService=e,this.router=t}return e.prototype.onSubmit=function(e){var t=this;console.log("submitted"),console.log("auth: ",e),this.authService.logUserIn(e).then(function(e){console.log("good res: ",e),t.router.navigate(["dashboard"])},function(e){console.log("err res: ",e)})},e.prototype.ngOnInit=function(){},e=__decorate([core_1.Component({moduleId:module.id,selector:"sp-authForm",templateUrl:"auth.form.component.html",styleUrls:["auth.form.style.css"],providers:[auth_service_1.AuthService]}),__metadata("design:paramtypes",[auth_service_1.AuthService,router_1.Router])],e)}();exports.AuthFormComponent=AuthFormComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF1dGgvYXV0aC5mb3JtLmNvbXBvbmVudC5qcyIsImF1dGgvYXV0aC5mb3JtLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6WyJfX2RlY29yYXRlIiwidGhpcyIsImRlY29yYXRvcnMiLCJ0YXJnZXQiLCJrZXkiLCJkZXNjIiwiZCIsImMiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJyIiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiUmVmbGVjdCIsImRlY29yYXRlIiwiaSIsImRlZmluZVByb3BlcnR5IiwiX19tZXRhZGF0YSIsImsiLCJ2IiwibWV0YWRhdGEiLCJjb3JlXzEiLCJyZXF1aXJlIiwicm91dGVyXzEiLCJhdXRoX3NlcnZpY2VfMSIsIkF1dGhGb3JtQ29tcG9uZW50IiwiYXV0aFNlcnZpY2UiLCJyb3V0ZXIiLCJwcm90b3R5cGUiLCJvblN1Ym1pdCIsImF1dGgiLCJfdGhpcyIsImNvbnNvbGUiLCJsb2ciLCJsb2dVc2VySW4iLCJ0aGVuIiwicmVzIiwibmF2aWdhdGUiLCJlcnIiLCJuZ09uSW5pdCIsIkNvbXBvbmVudCIsIm1vZHVsZUlkIiwibW9kdWxlIiwiaWQiLCJzZWxlY3RvciIsInRlbXBsYXRlVXJsIiwic3R5bGVVcmxzIiwicHJvdmlkZXJzIiwiQXV0aFNlcnZpY2UiLCJSb3V0ZXIiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUNBLElBQUlBLFlBQWNDLE1BQVFBLEtBQUtELFlBQWUsU0FBVUUsRUFBWUMsRUFBUUMsRUFBS0MsR0FDN0UsR0FBMkhDLEdBQXZIQyxFQUFJQyxVQUFVQyxPQUFRQyxFQUFJSCxFQUFJLEVBQUlKLEVBQWtCLE9BQVRFLEVBQWdCQSxFQUFPTSxPQUFPQyx5QkFBeUJULEVBQVFDLEdBQU9DLENBQ3JILElBQXVCLGdCQUFaUSxVQUFvRCxrQkFBckJBLFNBQVFDLFNBQXlCSixFQUFJRyxRQUFRQyxTQUFTWixFQUFZQyxFQUFRQyxFQUFLQyxPQUNwSCxLQUFLLEdBQUlVLEdBQUliLEVBQVdPLE9BQVMsRUFBR00sR0FBSyxFQUFHQSxLQUFTVCxFQUFJSixFQUFXYSxNQUFJTCxHQUFLSCxFQUFJLEVBQUlELEVBQUVJLEdBQUtILEVBQUksRUFBSUQsRUFBRUgsRUFBUUMsRUFBS00sR0FBS0osRUFBRUgsRUFBUUMsS0FBU00sRUFDaEosT0FBT0gsR0FBSSxHQUFLRyxHQUFLQyxPQUFPSyxlQUFlYixFQUFRQyxFQUFLTSxHQUFJQSxHQUU1RE8sV0FBY2hCLE1BQVFBLEtBQUtnQixZQUFlLFNBQVVDLEVBQUdDLEdBQ3ZELEdBQXVCLGdCQUFaTixVQUFvRCxrQkFBckJBLFNBQVFPLFNBQXlCLE1BQU9QLFNBQVFPLFNBQVNGLEVBQUdDLElDUjFHRSxPQUFBQyxRQUFrQyxpQkFFbENDLFNBQUFELFFBQXVCLG1CQUV2QkUsZUFBQUYsUUFBNEIsa0JBVTVCRyxrQkFBQSxXQUNJLFFBQUFBLEdBQW9CQyxFQUFrQ0MsR0FBbEMxQixLQUFBeUIsWUFBQUEsRUFBa0N6QixLQUFBMEIsT0FBQUEsRUFnQjFELE1BZElGLEdBQUFHLFVBQUFDLFNBQUEsU0FBU0MsR0FBVCxHQUFBQyxHQUFBOUIsSUFDSStCLFNBQVFDLElBQUksYUFDWkQsUUFBUUMsSUFBSSxTQUFVSCxHQUV0QjdCLEtBQUt5QixZQUFZUSxVQUFVSixHQUN0QkssS0FBSyxTQUFDQyxHQUNISixRQUFRQyxJQUFJLGFBQWNHLEdBQzFCTCxFQUFLSixPQUFPVSxVQUFVLGVBQ3ZCLFNBQUNDLEdBQ0FOLFFBQVFDLElBQUksWUFBYUssTUFJckNiLEVBQUFHLFVBQUFXLFNBQUEsYUF2QkpkLEVBQUF6QixZQUFDcUIsT0FBQW1CLFdBQ0dDLFNBQVVDLE9BQU9DLEdBQ2pCQyxTQUFVLGNBQ1ZDLFlBQWEsMkJBQ2JDLFdBQVksdUJBQ1pDLFdBQVl2QixlQUFBd0IsZUQyQlIvQixXQUFXLHFCQUFzQk8sZUFBZXdCLFlBQWF6QixTQUFTMEIsVUFDdkV4QixLQzFCTXlCLFNBQUF6QixrQkFBaUJBIiwiZmlsZSI6ImF1dGgvYXV0aC5mb3JtLmNvbXBvbmVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xudmFyIF9fbWV0YWRhdGEgPSAodGhpcyAmJiB0aGlzLl9fbWV0YWRhdGEpIHx8IGZ1bmN0aW9uIChrLCB2KSB7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0Lm1ldGFkYXRhID09PSBcImZ1bmN0aW9uXCIpIHJldHVybiBSZWZsZWN0Lm1ldGFkYXRhKGssIHYpO1xufTtcbnZhciBjb3JlXzEgPSByZXF1aXJlKCdAYW5ndWxhci9jb3JlJyk7XG52YXIgcm91dGVyXzEgPSByZXF1aXJlKCdAYW5ndWxhci9yb3V0ZXInKTtcbnZhciBhdXRoX3NlcnZpY2VfMSA9IHJlcXVpcmUoJy4vYXV0aC5zZXJ2aWNlJyk7XG52YXIgQXV0aEZvcm1Db21wb25lbnQgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEF1dGhGb3JtQ29tcG9uZW50KGF1dGhTZXJ2aWNlLCByb3V0ZXIpIHtcbiAgICAgICAgdGhpcy5hdXRoU2VydmljZSA9IGF1dGhTZXJ2aWNlO1xuICAgICAgICB0aGlzLnJvdXRlciA9IHJvdXRlcjtcbiAgICB9XG4gICAgQXV0aEZvcm1Db21wb25lbnQucHJvdG90eXBlLm9uU3VibWl0ID0gZnVuY3Rpb24gKGF1dGgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgY29uc29sZS5sb2coJ3N1Ym1pdHRlZCcpO1xuICAgICAgICBjb25zb2xlLmxvZygnYXV0aDogJywgYXV0aCk7XG4gICAgICAgIHRoaXMuYXV0aFNlcnZpY2UubG9nVXNlckluKGF1dGgpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAocmVzKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnZ29vZCByZXM6ICcsIHJlcyk7XG4gICAgICAgICAgICBfdGhpcy5yb3V0ZXIubmF2aWdhdGUoWydkYXNoYm9hcmQnXSk7XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdlcnIgcmVzOiAnLCBlcnIpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEF1dGhGb3JtQ29tcG9uZW50LnByb3RvdHlwZS5uZ09uSW5pdCA9IGZ1bmN0aW9uICgpIHsgfTtcbiAgICBBdXRoRm9ybUNvbXBvbmVudCA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBjb3JlXzEuQ29tcG9uZW50KHtcbiAgICAgICAgICAgIG1vZHVsZUlkOiBtb2R1bGUuaWQsXG4gICAgICAgICAgICBzZWxlY3RvcjogJ3NwLWF1dGhGb3JtJyxcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnYXV0aC5mb3JtLmNvbXBvbmVudC5odG1sJyxcbiAgICAgICAgICAgIHN0eWxlVXJsczogWydhdXRoLmZvcm0uc3R5bGUuY3NzJ10sXG4gICAgICAgICAgICBwcm92aWRlcnM6IFthdXRoX3NlcnZpY2VfMS5BdXRoU2VydmljZV1cbiAgICAgICAgfSksIFxuICAgICAgICBfX21ldGFkYXRhKCdkZXNpZ246cGFyYW10eXBlcycsIFthdXRoX3NlcnZpY2VfMS5BdXRoU2VydmljZSwgcm91dGVyXzEuUm91dGVyXSlcbiAgICBdLCBBdXRoRm9ybUNvbXBvbmVudCk7XG4gICAgcmV0dXJuIEF1dGhGb3JtQ29tcG9uZW50O1xufSgpKTtcbmV4cG9ydHMuQXV0aEZvcm1Db21wb25lbnQgPSBBdXRoRm9ybUNvbXBvbmVudDtcbiIsImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ0Zvcm0gfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuXG5pbXBvcnQgeyBBdXRoU2VydmljZSB9IGZyb20gJy4vYXV0aC5zZXJ2aWNlJztcbmltcG9ydCB7IEF1dGggfSBmcm9tICcuL2F1dGgnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBtb2R1bGVJZDogbW9kdWxlLmlkLFxuICAgIHNlbGVjdG9yOiAnc3AtYXV0aEZvcm0nLFxuICAgIHRlbXBsYXRlVXJsOiAnYXV0aC5mb3JtLmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnYXV0aC5mb3JtLnN0eWxlLmNzcyddLFxuICAgIHByb3ZpZGVyczogW0F1dGhTZXJ2aWNlXVxufSlcbmV4cG9ydCBjbGFzcyBBdXRoRm9ybUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBhdXRoU2VydmljZTogQXV0aFNlcnZpY2UsIHByaXZhdGUgcm91dGVyOiBSb3V0ZXIpIHsgfVxuXG4gICAgb25TdWJtaXQoYXV0aDogQXV0aCkge1xuICAgICAgICBjb25zb2xlLmxvZygnc3VibWl0dGVkJyk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdhdXRoOiAnLCBhdXRoKTtcblxuICAgICAgICB0aGlzLmF1dGhTZXJ2aWNlLmxvZ1VzZXJJbihhdXRoKVxuICAgICAgICAgICAgLnRoZW4oKHJlcykgPT4geyBcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZ29vZCByZXM6ICcsIHJlcylcbiAgICAgICAgICAgICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbJ2Rhc2hib2FyZCddKTtcbiAgICAgICAgICAgIH0sIChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZXJyIHJlczogJywgZXJyKSBcbiAgICAgICAgICAgIH0pXG4gICAgfVxuXG4gICAgbmdPbkluaXQoKSB7IH1cbn0iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
